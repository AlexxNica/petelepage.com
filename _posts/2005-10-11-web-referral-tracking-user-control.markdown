---
layout: post
title: Web Referral Tracking User Control
date: '2005-10-11 03:19:00 -0400'
categories: blog
tags:
- MSDNBlogPost
comments: []
---

In my efforts to continue building my personal web sites, I wanted to see where my visitors are coming from and how they are getting to my web site.&nbsp; Unfortunately, my ISP doesn't provide me with any kind of stats or access to the logs, so I'm kind of screwed there.&nbsp; So, I decided to take things into my own hands, and wrote a user control that has relatively little UI (and even then it's easy to disable).&nbsp; 

My solution uses an XML file in the app_data directory.&nbsp; I chose this as it was pretty easy to test and write, but I found out when I went to deploy it, my ISP won't let me write to files in my app_data directory either.&nbsp; The solution I ended up using was a SQL one, but for now, I'm going to post the XML file version.&nbsp; There are some issues with this, it does lock the file while the data is updated, so you run the risk of slowing your website down.&nbsp; I took this as an acceptable side effect on my website as I don't get a lot of hits, and if it takes an extra second or two to load, people can deal.

<pre>&lt;%@ Control Language="C#" ClassName="ReferralTracker" %&gt;&lt;%@ Import Namespace="System.Data" %&gt;&lt;script runat="server"&gt;    public bool ShowAtRuntime = false;        protected void Page_Load(object sender, EventArgs e)    {	<span style="COLOR: #00ff00">//The page that was requested</span>        string PageID = Request.RawUrl;	<span style="COLOR: #00ff00">//Where the user came from</span>        string Referrer = "";	<span style="COLOR: #00ff00">//If there is no referring page, Request.UrlReferrer is null</span>        if (Request.UrlReferrer != null)            Referrer = Request.UrlReferrer.ToString();        lblReferral.Text = "Referred By: " + Referrer;        if (ShowAtRuntime)            lblReferral.Visible = true;        string XsdFile = Server.MapPath("~") + "\App_Data\referral.xsd";        string XmlFile = Server.MapPath("~") + "\App_Data\referrals.xml";        object fileLock = new object();        System.Diagnostics.Debug.WriteLine("Referral: " + Referrer);	<span style="COLOR: #00ff00">//Lock the code so we don't have to worry about data loss</span>        lock (fileLock)        {            DataSet dsData = new DataSet();            dsData.ReadXmlSchema(XsdFile);            try            {                dsData.ReadXml(XmlFile);            }            catch (System.IO.FileNotFoundException ex)            {                System.Diagnostics.Debug.WriteLine("Creating file");            }            DataTable dt = dsData.Tables[0];            string[] keys = new string[2];            if (Referrer != null)                keys[0] = Referrer.ToLower();            else                keys[0] = "";            keys[1] = PageID;            <span style="COLOR: #00ff00">//See if this request has ever been hit before</span>            DataRow dr = dt.Rows.Find(keys);            if (dr != null)            {                <span style="COLOR: #00ff00">//It's been hit before, so lets increment the counter</span>                long iHits = (Int64)dr["Hits"];                dr["Hits"] = ++iHits;                dr["LastDateHit"] = DateTime.Now.ToString();                dr.AcceptChanges();                dt.AcceptChanges();            }            else            {                <span style="COLOR: #00ff00">//This is a new hit, lets add the record</span>                dr = dt.NewRow();                if (Referrer != null)                    dr["Referrer"] = Referrer.ToLower();                else                    dr["Referrer"] = "";                dr["Hits"] = 1;                dr["Page"] = PageID;                dr["FirstDateHit"] = DateTime.Now.ToString();                dr["LastDateHit"] = DateTime.Now.ToString();                dt.Rows.Add(dr);                dt.AcceptChanges();            }            dsData.WriteXml(XmlFile);        }    }&lt;/script&gt;&lt;asp:Label ID="lblReferral" runat="server" Visible="false" /&gt;</pre>

I've put in a few comments so you can understand what I did.&nbsp; It does depend on an XSD file to set things up, which is below:

<pre>&lt;?xml version="1.0" standalone="yes"?&gt;&lt;xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"&gt;  &lt;xs:element name="NewDataSet" msdata:IsDataSet="true"&gt;    &lt;xs:complexType&gt;      &lt;xs:choice maxOccurs="unbounded"&gt;        &lt;xs:element name="Referrals" msdata:CaseSensitive="False"&gt;          &lt;xs:complexType&gt;            &lt;xs:sequence&gt;              &lt;xs:element name="Referrer" type="xs:string" /&gt;              &lt;xs:element name="ID" type="xs:string" /&gt;              &lt;xs:element name="Hits" type="xs:string" minOccurs="0" /&gt;              &lt;xs:element name="FirstDateHit" type="xs:string" minOccurs="0" /&gt;              &lt;xs:element name="LastDateHit" type="xs:string" minOccurs="0" /&gt;            &lt;/xs:sequence&gt;          &lt;/xs:complexType&gt;        &lt;/xs:element&gt;      &lt;/xs:choice&gt;    &lt;/xs:complexType&gt;    &lt;xs:unique name="Constraint1" msdata:PrimaryKey="true"&gt;      &lt;xs:selector xpath=".//Referrals" /&gt;      &lt;xs:field xpath="Referrer" /&gt;      &lt;xs:field xpath="ID" /&gt;    &lt;/xs:unique&gt;  &lt;/xs:element&gt;&lt;/xs:schema&gt;</pre>

The solution I ended up using gets the data from an SQL database instead of an XML file, but it still does the same thing where it reads from the table to find out if the hit has happened before, so it can then increase the count, or if it's a fresh hit, it'll just add a new entry to the table.